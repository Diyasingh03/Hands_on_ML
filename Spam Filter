{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":982,"sourceType":"datasetVersion","datasetId":483}],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nimport nltk\nfrom nltk.corpus import stopwords\n\nnltk.download('stopwords')\nnltk.download('punkt')\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking \"run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-30T16:33:44.984392Z","iopub.execute_input":"2024-12-30T16:33:44.984900Z","iopub.status.idle":"2024-12-30T16:33:47.206981Z","shell.execute_reply.started":"2024-12-30T16:33:44.984852Z","shell.execute_reply":"2024-12-30T16:33:47.205734Z"}},"outputs":[{"name":"stdout","text":"[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package punkt to /usr/share/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n/kaggle/input/sms-spam-collection-dataset/spam.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/sms-spam-collection-dataset/spam.csv', encoding = 'latin1')\ndf.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T16:33:47.208536Z","iopub.execute_input":"2024-12-30T16:33:47.209109Z","iopub.status.idle":"2024-12-30T16:33:47.285212Z","shell.execute_reply.started":"2024-12-30T16:33:47.209069Z","shell.execute_reply":"2024-12-30T16:33:47.284057Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5572 entries, 0 to 5571\nData columns (total 5 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   v1          5572 non-null   object\n 1   v2          5572 non-null   object\n 2   Unnamed: 2  50 non-null     object\n 3   Unnamed: 3  12 non-null     object\n 4   Unnamed: 4  6 non-null      object\ndtypes: object(5)\nmemory usage: 217.8+ KB\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"Cleaning data:","metadata":{}},{"cell_type":"code","source":"df.drop(columns =['Unnamed: 2','Unnamed: 3','Unnamed: 4'],inplace=True)\ndf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T16:33:47.287022Z","iopub.execute_input":"2024-12-30T16:33:47.287370Z","iopub.status.idle":"2024-12-30T16:33:47.311296Z","shell.execute_reply.started":"2024-12-30T16:33:47.287338Z","shell.execute_reply":"2024-12-30T16:33:47.310273Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"        v1                                                 v2\n0      ham  Go until jurong point, crazy.. Available only ...\n1      ham                      Ok lar... Joking wif u oni...\n2     spam  Free entry in 2 a wkly comp to win FA Cup fina...\n3      ham  U dun say so early hor... U c already then say...\n4      ham  Nah I don't think he goes to usf, he lives aro...\n...    ...                                                ...\n5567  spam  This is the 2nd time we have tried 2 contact u...\n5568   ham              Will Ì_ b going to esplanade fr home?\n5569   ham  Pity, * was in mood for that. So...any other s...\n5570   ham  The guy did some bitching but I acted like i'd...\n5571   ham                         Rofl. Its true to its name\n\n[5572 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>v1</th>\n      <th>v2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ham</td>\n      <td>Go until jurong point, crazy.. Available only ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ham</td>\n      <td>Ok lar... Joking wif u oni...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>spam</td>\n      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ham</td>\n      <td>U dun say so early hor... U c already then say...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ham</td>\n      <td>Nah I don't think he goes to usf, he lives aro...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>5567</th>\n      <td>spam</td>\n      <td>This is the 2nd time we have tried 2 contact u...</td>\n    </tr>\n    <tr>\n      <th>5568</th>\n      <td>ham</td>\n      <td>Will Ì_ b going to esplanade fr home?</td>\n    </tr>\n    <tr>\n      <th>5569</th>\n      <td>ham</td>\n      <td>Pity, * was in mood for that. So...any other s...</td>\n    </tr>\n    <tr>\n      <th>5570</th>\n      <td>ham</td>\n      <td>The guy did some bitching but I acted like i'd...</td>\n    </tr>\n    <tr>\n      <th>5571</th>\n      <td>ham</td>\n      <td>Rofl. Its true to its name</td>\n    </tr>\n  </tbody>\n</table>\n<p>5572 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"df.rename(columns={'v1':'target','v2':'text'},inplace =True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T16:34:38.912431Z","iopub.execute_input":"2024-12-30T16:34:38.912821Z","iopub.status.idle":"2024-12-30T16:34:38.918157Z","shell.execute_reply.started":"2024-12-30T16:34:38.912783Z","shell.execute_reply":"2024-12-30T16:34:38.917123Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\ndf['target']=encoder.fit_transform(df['target'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T16:37:36.208517Z","iopub.execute_input":"2024-12-30T16:37:36.208962Z","iopub.status.idle":"2024-12-30T16:37:36.216569Z","shell.execute_reply.started":"2024-12-30T16:37:36.208923Z","shell.execute_reply":"2024-12-30T16:37:36.215324Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T16:37:49.309351Z","iopub.execute_input":"2024-12-30T16:37:49.309827Z","iopub.status.idle":"2024-12-30T16:37:49.320118Z","shell.execute_reply.started":"2024-12-30T16:37:49.309793Z","shell.execute_reply":"2024-12-30T16:37:49.318590Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   target                                               text\n0       0  Go until jurong point, crazy.. Available only ...\n1       0                      Ok lar... Joking wif u oni...\n2       1  Free entry in 2 a wkly comp to win FA Cup fina...\n3       0  U dun say so early hor... U c already then say...\n4       0  Nah I don't think he goes to usf, he lives aro...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>target</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>Go until jurong point, crazy.. Available only ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>Ok lar... Joking wif u oni...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>U dun say so early hor... U c already then say...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>Nah I don't think he goes to usf, he lives aro...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T16:39:07.185295Z","iopub.execute_input":"2024-12-30T16:39:07.185710Z","iopub.status.idle":"2024-12-30T16:39:07.194569Z","shell.execute_reply.started":"2024-12-30T16:39:07.185678Z","shell.execute_reply":"2024-12-30T16:39:07.193279Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"target    0\ntext      0\ndtype: int64"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"df.duplicated().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T16:39:20.329893Z","iopub.execute_input":"2024-12-30T16:39:20.330301Z","iopub.status.idle":"2024-12-30T16:39:20.346774Z","shell.execute_reply.started":"2024-12-30T16:39:20.330271Z","shell.execute_reply":"2024-12-30T16:39:20.345387Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"403"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"df = df.drop_duplicates(keep='first')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T16:39:36.768744Z","iopub.execute_input":"2024-12-30T16:39:36.769156Z","iopub.status.idle":"2024-12-30T16:39:36.780334Z","shell.execute_reply.started":"2024-12-30T16:39:36.769122Z","shell.execute_reply":"2024-12-30T16:39:36.778997Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"df.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T16:39:42.453641Z","iopub.execute_input":"2024-12-30T16:39:42.454068Z","iopub.status.idle":"2024-12-30T16:39:42.460999Z","shell.execute_reply.started":"2024-12-30T16:39:42.454034Z","shell.execute_reply":"2024-12-30T16:39:42.459671Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"(5169, 2)"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"values= df['target'].value_counts()\ntotal = values.sum()\npercent_0 = (values[0]/total)*100\npercent_1 = 100-percent_0\n\nprint(\"percentage of 0 :\",percent_0)\nprint(\"percentage of 1 :\",percent_1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T16:41:57.460463Z","iopub.execute_input":"2024-12-30T16:41:57.460983Z","iopub.status.idle":"2024-12-30T16:41:57.470862Z","shell.execute_reply.started":"2024-12-30T16:41:57.460924Z","shell.execute_reply":"2024-12-30T16:41:57.469540Z"}},"outputs":[{"name":"stdout","text":"percentage of 0 : 87.3669955503966\npercentage of 1 : 12.633004449603405\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"explode=(0,0.1)\nfig, ax = plt.subplots(figsize=(8,8))\nwedges,texts,autotexts = ax.pie(values,labels=['ham','spam'],autopct='%0.2f', explode=explode)\nax.set_title('SMS Classification')\nax.axis('equal')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T16:46:22.614787Z","iopub.execute_input":"2024-12-30T16:46:22.615127Z","iopub.status.idle":"2024-12-30T16:46:22.751637Z","shell.execute_reply.started":"2024-12-30T16:46:22.615101Z","shell.execute_reply":"2024-12-30T16:46:22.750388Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x800 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"df['num_characters']=df['text'].apply(len)\ndf['num_words'] = df['text'].apply(lambda x:len(nltk.word_tokenize(x)))\ndf['num_sentences'] = df['text'].apply(lambda x:len(nltk.sent_tokenize(x)))\ndf[['num_characters','num_words','num_sentences']].describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T16:49:33.646828Z","iopub.execute_input":"2024-12-30T16:49:33.647209Z","iopub.status.idle":"2024-12-30T16:49:35.011779Z","shell.execute_reply.started":"2024-12-30T16:49:33.647177Z","shell.execute_reply":"2024-12-30T16:49:35.010527Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-18-4234c2a9b532>:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df['num_characters']=df['text'].apply(len)\n<ipython-input-18-4234c2a9b532>:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df['num_words'] = df['text'].apply(lambda x:len(nltk.word_tokenize(x)))\n<ipython-input-18-4234c2a9b532>:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df['num_sentences'] = df['text'].apply(lambda x:len(nltk.sent_tokenize(x)))\n","output_type":"stream"},{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"       num_characters    num_words  num_sentences\ncount     5169.000000  5169.000000    5169.000000\nmean        78.977945    18.286129       1.961308\nstd         58.236293    13.226400       1.432583\nmin          2.000000     1.000000       1.000000\n25%         36.000000     9.000000       1.000000\n50%         60.000000    15.000000       1.000000\n75%        117.000000    26.000000       2.000000\nmax        910.000000   219.000000      38.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>num_characters</th>\n      <th>num_words</th>\n      <th>num_sentences</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5169.000000</td>\n      <td>5169.000000</td>\n      <td>5169.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>78.977945</td>\n      <td>18.286129</td>\n      <td>1.961308</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>58.236293</td>\n      <td>13.226400</td>\n      <td>1.432583</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>2.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>36.000000</td>\n      <td>9.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>60.000000</td>\n      <td>15.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>117.000000</td>\n      <td>26.000000</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>910.000000</td>\n      <td>219.000000</td>\n      <td>38.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"df[df['target'] == 0][['num_characters', 'num_words', 'num_sentences']].describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T16:51:26.565852Z","iopub.execute_input":"2024-12-30T16:51:26.566270Z","iopub.status.idle":"2024-12-30T16:51:26.590293Z","shell.execute_reply.started":"2024-12-30T16:51:26.566240Z","shell.execute_reply":"2024-12-30T16:51:26.588604Z"}},"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"       num_characters    num_words  num_sentences\ncount     4516.000000  4516.000000    4516.000000\nmean        70.459256    16.957484       1.815545\nstd         56.358207    13.394052       1.364098\nmin          2.000000     1.000000       1.000000\n25%         34.000000     8.000000       1.000000\n50%         52.000000    13.000000       1.000000\n75%         90.000000    22.000000       2.000000\nmax        910.000000   219.000000      38.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>num_characters</th>\n      <th>num_words</th>\n      <th>num_sentences</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>4516.000000</td>\n      <td>4516.000000</td>\n      <td>4516.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>70.459256</td>\n      <td>16.957484</td>\n      <td>1.815545</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>56.358207</td>\n      <td>13.394052</td>\n      <td>1.364098</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>2.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>34.000000</td>\n      <td>8.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>52.000000</td>\n      <td>13.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>90.000000</td>\n      <td>22.000000</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>910.000000</td>\n      <td>219.000000</td>\n      <td>38.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"df[df['target'] == 1][['num_characters', 'num_words', 'num_sentences']].describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T16:51:41.670899Z","iopub.execute_input":"2024-12-30T16:51:41.671256Z","iopub.status.idle":"2024-12-30T16:51:41.692498Z","shell.execute_reply.started":"2024-12-30T16:51:41.671225Z","shell.execute_reply":"2024-12-30T16:51:41.691472Z"}},"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"       num_characters   num_words  num_sentences\ncount      653.000000  653.000000     653.000000\nmean       137.891271   27.474732       2.969372\nstd         30.137753    6.893007       1.488910\nmin         13.000000    2.000000       1.000000\n25%        132.000000   25.000000       2.000000\n50%        149.000000   29.000000       3.000000\n75%        157.000000   32.000000       4.000000\nmax        224.000000   44.000000       9.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>num_characters</th>\n      <th>num_words</th>\n      <th>num_sentences</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>653.000000</td>\n      <td>653.000000</td>\n      <td>653.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>137.891271</td>\n      <td>27.474732</td>\n      <td>2.969372</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>30.137753</td>\n      <td>6.893007</td>\n      <td>1.488910</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>13.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>132.000000</td>\n      <td>25.000000</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>149.000000</td>\n      <td>29.000000</td>\n      <td>3.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>157.000000</td>\n      <td>32.000000</td>\n      <td>4.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>224.000000</td>\n      <td>44.000000</td>\n      <td>9.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":22},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}